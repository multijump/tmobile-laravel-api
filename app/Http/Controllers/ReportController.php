<?php

namespace App\Http\Controllers;

use App\Models\Event;
use App\Models\Participant;
use App\Models\Survey;
use App\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xls;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class ReportController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {

    }

    /**
     * Generate event report and email to creating user.
     *
     * @param Request $request
     *
     * @return \Illuminate\Http\Response
     */
    public function eventGenerate(Request $request)
    {
        /** @var User $requestUser */
        $requestUser = Auth::user();
        $eventId = (int) $request->get('event_id');
        /** @var Event $event */
        $event = Event::find($eventId);

        if(empty($requestUser)) {
            return $this->redirectWithMessage('errorMessage', 'Please Login.', null, 'login');
        }
        if(empty($eventId) || empty($event)) {
            return $this->redirectWithMessage('errorMessage', 'Could not find event.', $request);
        }
        if(!$requestUser->hasAdminRole()) {
            // At the moment, only admin users
            return $this->redirectWithMessage('errorMessage', 'Event report can only be generated by person who created event.', $request);
        }


        if($requestUser->hasAdminRole()) {
            $redirectPath = route('admin.home');
        } else {
             return $this->redirectWithMessage('errorMessage', 'Event report can only be generated by an admin.', $request);
        }

        $rawSqlStatement = '
                events.title as event_title,
                events.store_number as event_store_number,
                events.workfront_id as event_workfront_id,
                events.company as event_company,
                DATE_FORMAT(events.start_date, "%m/%d/%Y") as event_start_date,
                DATE_FORMAT(events.end_date, "%m/%d/%Y") as event_end_date,
                events.default_language as event_language,
                participants.first_name as participant_first_name,
                participants.last_name as participant_last_name,
                CASE WHEN participants.is_contact <> 0 THEN participants.email ELSE "NO CONTACT" END as participant_email,'
        ;

        if (!$requestUser->hasAdminRole()) {
            // Don't display phone number when requesting user is not an admin.
            $rawSqlStatement .= '
                "XXXXXX" as participant_phone,'
            ;
        } else {
            // Display phone number when requesting user is an admin (if user allows contact).
            $rawSqlStatement .= '
                CASE WHEN participants.is_contact <> 0 THEN participants.phone ELSE "NO CONTACT" END as participant_phone,'
            ;
        }

        $rawSqlStatement .= '
                participants.zip_code as participant_zip_code,
                participants.language as participant_language,
                CASE WHEN participants.is_customer <> 0 THEN "yes" ELSE "no" END as is_customer,
                participants.current_carrier as participant_current_carrier,
                CASE WHEN participants.is_contact <> 0 THEN "yes" ELSE "no" END as participant_is_contact,
                DATE_FORMAT(participants.created_at, "%m/%d/%Y") as participant_created_date,
                cu.first_name as creating_user_first_name,
                cu.last_name as creating_user_last_name,
                cu.email as creating_user_email,
                DATE_FORMAT(participants.selected_date, "%m/%d/%Y") as participant_selected_date,
                su.first_name as selecting_user_first_name,
                su.last_name as selecting_user_last_name,
                su.email as selecting_user_email'
        ;

        $eventRecords = Participant::query()
            ->join('events', 'participants.event_id', '=', 'events.id')
            ->leftJoin('users as cu', 'participants.created_by_id', '=', 'cu.id')
            ->leftJoin('users as su', 'participants.selected_by_id', '=', 'su.id')
            ->where('event_id', '=', $eventId)
            ->select(\DB::raw($rawSqlStatement))
            ->orderBy('participants.created_at')
            ->get()
            ->toArray();

        $rowTitles = [
            'Event Name', // A
            'Event Store Number', // B
            'Event Workfront ID', // C
            'Event Brand', // D
            'Event Start Date', // E
            'Event End Date', // F
            'Event Default Language', // G
            'Participant First Name', // H
            'Participant Last Name', // I
            'Participant Email', // J
            'Participant Phone', // K
            'Participant Zip Code', // L
            'Participant Language', // M
            'Participant Is Customer', // N
            'Participant Current Carrier', // O
            'Participant Can Contact', // P
            'Participant Created Date', // Q
            'Created By First Name', // R
            'Created By Last Name', // S
            'Created By Email', // T
            'Winner Selected Date', // U
            'Winner Selected By First', // V
            'Winner Selected By Last', // W
            'Winner Selected By Email', // X
            'Event Description', // Y
            'Event Region', // Z
            'Event State', // AA
        ];

        $spreadsheet = new Spreadsheet();

        $sheet = $spreadsheet->getActiveSheet();

        /* $sheet->setCellValue('X1', $event->title . ' Report. ' . count($eventRecords) . ' Records');
        $sheet->setCellValue('X3', $event->description);
        $sheet->setCellValue('Y3', $event->region);
        $sheet->setCellValue('Z3', $event->state); */

        //if (!$event->has_surveys_enabled) {
        //    $sheet->setCellValue('A1', request()->getHost() . '/surveys/create?event_id=' . $event->id );
        //}

        $sheet->fromArray($rowTitles, null, 'A1');

        for ($i = 0; $i < (count($eventRecords)); $i++){
            $sheet->fromArray($eventRecords[$i], null, 'A' . (2 + $i));
            $sheet->setCellValue('Y' . (2 + $i), $event->description);
            $sheet->setCellValue('Z' . (2 + $i), $event->region);
            $sheet->setCellValue('AA' . (2 + $i), $event->state);
        }

        $spreadsheet->getActiveSheet()->getColumnDimension('A')->setWidth(25); // Event Name
        $spreadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(15); // Event Store Number
        $spreadsheet->getActiveSheet()->getColumnDimension('C')->setWidth(15); // Event Workfront ID
        $spreadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(15); // Event Brand
        $spreadsheet->getActiveSheet()->getColumnDimension('E')->setWidth(15); // Event Start Date
        $spreadsheet->getActiveSheet()->getColumnDimension('F')->setWidth(15); // Event End Date
        $spreadsheet->getActiveSheet()->getColumnDimension('G')->setWidth(15); // Event Language
        $spreadsheet->getActiveSheet()->getColumnDimension('H')->setWidth(18); // Participant First Name
        $spreadsheet->getActiveSheet()->getColumnDimension('I')->setWidth(18); // Participant Last Name
        $spreadsheet->getActiveSheet()->getColumnDimension('J')->setWidth(25); // Participant Email
        $spreadsheet->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Participant Phone
        $spreadsheet->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Participant Zip Code
        $spreadsheet->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Participant Language
        $spreadsheet->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Participant Is Customer
        $spreadsheet->getActiveSheet()->getColumnDimension('O')->setWidth(15); // Participant Current Carrier
        $spreadsheet->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Participant Can Be Contacted
        $spreadsheet->getActiveSheet()->getColumnDimension('Q')->setWidth(20); // Participant Created Date
        $spreadsheet->getActiveSheet()->getColumnDimension('R')->setWidth(18); // Created By First Name
        $spreadsheet->getActiveSheet()->getColumnDimension('S')->setWidth(18); // Created By Last Name
        $spreadsheet->getActiveSheet()->getColumnDimension('T')->setWidth(20); // Created By Email
        $spreadsheet->getActiveSheet()->getColumnDimension('U')->setWidth(20); // Selected Date
        $spreadsheet->getActiveSheet()->getColumnDimension('V')->setWidth(15); // Selected By First
        $spreadsheet->getActiveSheet()->getColumnDimension('W')->setWidth(18); // Selected By Last
        $spreadsheet->getActiveSheet()->getColumnDimension('X')->setWidth(18); // Selected By Email
        $spreadsheet->getActiveSheet()->getColumnDimension('Y')->setWidth(25); // Event Description
        $spreadsheet->getActiveSheet()->getColumnDimension('Z')->setWidth(15); // Event Region
        $spreadsheet->getActiveSheet()->getColumnDimension('AA')->setWidth(15); // Event State

        // $writer = new Xls($spreadsheet);
        $writer = new Xlsx($spreadsheet);

        $timestamp = Carbon::now()->format('m-d-Y_') . time();

        $filename = 'EventReportGeneratedOn' . $timestamp ;

        /**
         * Create temporary files as we
         * save .xls file,
         * zip the file,
         * email file to user,
         * remove temporary files
         */

        //The name of the directory that we need to create.
        $directoryName = public_path() . '/filestorage/reports/events';

        // $savePath = $directoryName . '/' . $filename.'.xls';
        $savePath = $directoryName . '/' . $filename.'.xlsx';
        $zipSavePath = $directoryName . '/' . $filename . '.zip';

        $writer->save($savePath);

        unset($sheet);

        // Zip .xls file inside same directory
        echo system('zip -P ' . env('ZIP_FILE_PASSWORD') . '  -j ' . $zipSavePath . ' ' . $savePath);

        try {
            $mandrill = new \Mandrill(env('MANDRILL_API_KEY'));
            $message = array(
                'html' => view('emails.retrieveEventData')->render(),
                'subject' => $event->title . ' ' . $event->store_number . ' Customer Event Data Export',
                'from_email' => env('EMAIL_FROM_ADDRESS'),
                'from_name' => env('EMAIL_FROM_NAME'),
                'to' => array(
                    array(
                        'email' => $requestUser->email,
                        'name' => 'T-Mobile User',
                        'type' => 'to'
                    )
                ),
                'headers' => array('Reply-To' => env('EMAIL_FROM_ADDRESS')),
                'attachments' => array(
                    array(
                        'type' => 'application/zip',
                        'name' => $filename . '.zip',
                        'content' => base64_encode(file_get_contents($zipSavePath))
                    )
                ),
            );
            $result = $mandrill->messages->send($message);

            if (!empty($result[0]) && !empty($result[0]['status'])) {
                if($result[0]['status'] == 'rejected')
                {
                    return $this->redirectWithMessage(
                        'errorMessage',
                        'There was a problem sending the report, please contact support at: ' . env('USER_SUPPORT_EMAIL_ADDRESS') . ". Error was: Mandrill Rejection",
                        null,
                        $redirectPath
                    );
                }
            }

        } catch(\Mandrill_Error $e) {
            // Mandrill errors are thrown as exceptions
//            echo 'A mandrill error occurred: ' . get_class($e) . ' - ' . $e->getMessage();
            // A mandrill error occurred: Mandrill_Unknown_Subaccount - No subaccount exists with the id 'customer-123'
//            throw $e;

            return $this->redirectWithMessage(
                'errorMessage',
                'There was a problem sending the report, please contact support at: ' . env('USER_SUPPORT_EMAIL_ADDRESS') . ". Error was: Mandrill Error: " . $e->getMessage(),
                null,
                $redirectPath
            );
        }

        // Remove temporary files
        unlink($savePath);
        unlink($zipSavePath);

        return $this->redirectWithMessage(
            'successMessage',
            "Report has been generated and will be sent to " . $requestUser->email,
            null,
            $redirectPath
        );
    }

    public function surveyGenerate(Request $request)
    {
        /** @var User $requestUser */
        $requestUser = Auth::user();
        $eventId = (int) $request->get('event_id');
        /** @var Event $event */
        $event = Event::find($eventId);

        if(empty($requestUser)) {
            return $this->redirectWithMessage('errorMessage', 'Please Login.', null, 'login');
        }

        if(empty($eventId) || empty($event)) {
            return $this->redirectWithMessage('errorMessage', 'Could not find event.', $request);
        }

        if( !( $requestUser->hasAdminRole() || $requestUser->email == $event->createdByUser->email ) ) {
            // At the moment, only admin users
            return $this->redirectWithMessage('errorMessage', 'Survey report can only be generated by person who created event or admin.', $request);
        }

        if($requestUser->hasAdminRole()) {
            $redirectPath = route('admin.home');
        } else if($requestUser->email == $event->createdByUser->email){
            $redirectPath = route('home');
        } else {
             return $this->redirectWithMessage('errorMessage', 'Survey report can only be generated by person who created event or admin.', $request);
        }

        $rawSqlStatement =
                'DATE_FORMAT(surveys.created_at, "%m/%d/%Y") as survey_date, ' . // A
                'surveys.age as age, ' . // B
                'surveys.length_with_provider as length_with_provider, ' . // C
                'surveys.leave_likelihood as leave_likelihood, ' . // D
                'surveys.most_important as most_important, ' . // E
                'surveys.brand_rating as brand_rating, ' . // F
                'surveys.brand_rating_why as brand_rating_why, ' . // G
                'surveys.connect_wherever as connect_wherever, ' . // H
                'surveys.connect_wherever_why as connect_wherever_why, ' . // I
                'surveys.switch_rating as switch_rating, ' . // J
                'surveys.comments as comments, ' . // K
                'surveys.created_at as time, ' . // L
                'CASE WHEN surveys.has_mobile_phone <> 0 THEN "yes" ELSE "no" END as has_mobile_phone, ' . // M
                'CASE WHEN surveys.helps_decide_provider <> 0 THEN "yes" ELSE "no" END as helps_decide_provider, ' . // N
                'surveys.event_experience as event_experience, ' . // O
                'surveys.learned_something as learned_something' // P
        ;

        $rawZipStatement =
                'DISTINCT zip_code';

        $zipRecords = Participant::query()
            ->where('event_id', '=', $eventId)
            ->select(\DB::raw($rawZipStatement))
            ->orderBy('participants.zip_code')
            ->get()
            ->toArray();

        $surveyRecords = Survey::query()
            ->where('event_id', '=', $eventId)
            ->select(\DB::raw($rawSqlStatement))
            ->orderBy('surveys.created_at')
            ->get()
            ->toArray();

        $rowTitles = [
            'Survey Date', // A
            'Age', // B
            'Length With Provider', // C
            'Likelihood of Leaving', // D
            'Most Important Factor', // E
            'Brand For You', // F
            'Brand For You: Why?', // G
            'Connect Wherever', // H
            'Connect Wherever: Why?', // I
            'Consider Switching', // J
            'Comments', // K
            'Time', // L
            'Has Mobile Phone', // M
            'Helps Decide Provider', // N
            'Event Experience', // O
            'Learned Something', // P
            'Event Name', // Q
            'Event Description', // R
            'Event Region', // S
            'Event State', // T
        ];

        $spreadsheet = new Spreadsheet();

        $sheet = $spreadsheet->getActiveSheet();
        $sheet->setTitle("Exit Survey Results");
        /* $sheet->setCellValue('A1', $event->title . ' Report. ' . count($surveyRecords) . ' Records');
        $sheet->setCellValue('B1', $event->description);
        $sheet->setCellValue('A2', $event->region);
        $sheet->setCellValue('B2', $event->state); */
        //$sheet->setCellValue('A1', route('surveys.create', ['event_id' => $eventId]));

        $sheet->fromArray($rowTitles, null, 'A1');

        $spreadsheet->createSheet();
        $sheet2 = $spreadsheet->getSheet(1);
        $sheet2->setTitle("Participant Zip Codes");
        $sheet2->fromArray(['Participant Zip Codes', 'Event Name', 'Event Region', 'Event State', 'Event Store Number', 'Event Workfront ID', 'Event Start Date', 'Event End Date'], null, 'A1');
        // $sheet2->fromArray([$event->title, $event->region, $event->state, $event->store_number, $event->workfront_id, $event->start_date, $event->end_date], null, 'A2');

        // $sheet2->setCellValue('A1', "Participant Zip Codes");

        for ($i = 0; $i < (count($surveyRecords)); $i++){
            $sheet->fromArray($surveyRecords[$i], null, 'A' . (2 + $i));
            $sheet->setCellValue('Q' . (3 + $i), $event->title);
            $sheet->setCellValue('R' . (3 + $i), $event->description);
            $sheet->setCellValue('S' . (3 + $i), $event->region);
            $sheet->setCellValue('T' . (3 + $i), $event->state);
        }

        for ($i = 0; $i < (count($zipRecords)); $i++){
            $sheet2->fromArray($zipRecords[$i], null, 'A' . (2 + $i));
            $sheet2->setCellValue('B' . (2 + $i), $event->title);
            $sheet2->setCellValue('C' . (2 + $i), $event->region);
            $sheet2->setCellValue('D' . (2 + $i), $event->state);
            $sheet2->setCellValue('E' . (2 + $i), $event->store_number);
            $sheet2->setCellValue('F' . (2 + $i), $event->workfront_id);
            $sheet2->setCellValue('G' . (2 + $i), $event->start_date);
            $sheet2->setCellValue('H' . (2 + $i), $event->end_date);
        }

        $spreadsheet->getActiveSheet()->getColumnDimension('A')->setWidth(25); // Survey Date
        $spreadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(15); // Age
        $spreadsheet->getActiveSheet()->getColumnDimension('C')->setWidth(25); // Length With Provider
        $spreadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(25); // Likelihood of Leaving
        $spreadsheet->getActiveSheet()->getColumnDimension('E')->setWidth(18); // Most Important Factor
        $spreadsheet->getActiveSheet()->getColumnDimension('F')->setWidth(18); // Brand For You
        $spreadsheet->getActiveSheet()->getColumnDimension('G')->setWidth(25); // Brand For You: Why
        $spreadsheet->getActiveSheet()->getColumnDimension('H')->setWidth(15); // Connect Wherever
        $spreadsheet->getActiveSheet()->getColumnDimension('I')->setWidth(15); // Connect Wherever: Why
        $spreadsheet->getActiveSheet()->getColumnDimension('J')->setWidth(15); // Consider Switching
        $spreadsheet->getActiveSheet()->getColumnDimension('K')->setWidth(15); // Comments
        $spreadsheet->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Time
        //legacy survey questions
        $spreadsheet->getActiveSheet()->getColumnDimension('M')->setWidth(15);
        $spreadsheet->getActiveSheet()->getColumnDimension('N')->setWidth(15);
        $spreadsheet->getActiveSheet()->getColumnDimension('O')->setWidth(15);
        $spreadsheet->getActiveSheet()->getColumnDimension('P')->setWidth(15);
        // event info
        $spreadsheet->getActiveSheet()->getColumnDimension('Q')->setWidth(25); // Event name
        $spreadsheet->getActiveSheet()->getColumnDimension('R')->setWidth(25); // Event description
        $spreadsheet->getActiveSheet()->getColumnDimension('S')->setWidth(15); // Event region
        $spreadsheet->getActiveSheet()->getColumnDimension('T')->setWidth(15); // Event state

        $sheet2->getColumnDimension('A')->setWidth(25);
        $sheet2->getColumnDimension('B')->setWidth(25);
        $sheet2->getColumnDimension('C')->setWidth(25);
        $sheet2->getColumnDimension('D')->setWidth(25);
        $sheet2->getColumnDimension('E')->setWidth(25);
        $sheet2->getColumnDimension('F')->setWidth(25);
        $sheet2->getColumnDimension('G')->setWidth(25);
        $sheet2->getColumnDimension('H')->setWidth(25);

        // $writer = new Xls($spreadsheet);
        $writer = new Xlsx($spreadsheet);

        $timestamp = Carbon::now()->format('m-d-Y_') . time();

        $filename = 'SurveyReportGeneratedOn' . $timestamp ;

        /**
         * Create temporary files as we
         * save .xls file,
         * zip the file,
         * email file to user,
         * remove temporary files
         */

        //The name of the directory that we need to create.
        $directoryName = public_path() . '/filestorage/reports/surveys';

        // $savePath = $directoryName . '/' . $filename.'.xls';
        $savePath = $directoryName . '/' . $filename.'.xlsx';
        $zipSavePath = $directoryName . '/' . $filename . '.zip';

        $writer->save($savePath);

        unset($sheet);

        // Zip .xls file inside same directory
        echo system('zip -P ' . env('ZIP_FILE_PASSWORD') . '  -j ' . $zipSavePath . ' ' . $savePath);

        try {
            $mandrill = new \Mandrill(env('MANDRILL_API_KEY'));
            $message = array(
                'html' => view('emails.retrieveEventData')->render(),
                'subject' => $event->title . ' ' . $event->store_number . ' Customer Event Survey Data Export',
                'from_email' => env('EMAIL_FROM_ADDRESS'),
                'from_name' => env('EMAIL_FROM_NAME'),
                'to' => array(
                    array(
                        'email' => $requestUser->email,
                        'name' => 'T-Mobile User',
                        'type' => 'to'
                    )
                ),
                'headers' => array('Reply-To' => env('EMAIL_FROM_ADDRESS')),
                'attachments' => array(
                    array(
                        'type' => 'application/zip',
                        'name' => $filename . '.zip',
                        'content' => base64_encode(file_get_contents($zipSavePath))
                    )
                ),
            );
            $result = $mandrill->messages->send($message);

            if (!empty($result[0]) && !empty($result[0]['status'])) {
                if($result[0]['status'] == 'rejected')
                {
                    return $this->redirectWithMessage(
                        'errorMessage',
                        'There was a problem sending the report, please contact support at: ' . env('USER_SUPPORT_EMAIL_ADDRESS') . ". Error was: Mandrill Rejection",
                        null,
                        $redirectPath
                    );
                }
            }

        } catch(\Mandrill_Error $e) {
            // Mandrill errors are thrown as exceptions
//            echo 'A mandrill error occurred: ' . get_class($e) . ' - ' . $e->getMessage();
            // A mandrill error occurred: Mandrill_Unknown_Subaccount - No subaccount exists with the id 'customer-123'
//            throw $e;

            return $this->redirectWithMessage(
                'errorMessage',
                'There was a problem sending the report, please contact support at: ' . env('USER_SUPPORT_EMAIL_ADDRESS') . ". Error was: Mandrill Error: " . $e->getMessage(),
                null,
                $redirectPath
            );
        }

        // Remove temporary files
        unlink($savePath);
        unlink($zipSavePath);

        return $this->redirectWithMessage(
            'successMessage',
            "Report has been generated and will be sent to " . $requestUser->email,
            null,
            $redirectPath
        );
    }

    /**
     * Show the form for generating an historical report.
     *
     * @param Request $request
     *
     * @return \Illuminate\Http\Response
     */
    public function historical(Request $request)
    {

        return view('reports.historical');
    }

    /**
     * Generate historical report and email to requesting user.
     *
     * @param Request $request
     *
     * @return \Illuminate\Http\Response
     */
    public function historicalGenerate(Request $request)
    {
        /** @var User $requestUser */
        $requestUser = \Auth::user();
        $formattedStartDate = $request->get('start_date');
        $formattedEndDate = $request->get('end_date');
        $startDate = null;
        $endDate = null;

        if(empty($requestUser)) {
            return $this->redirectWithMessage('errorMessage', 'Please Login.', null, 'login');
        }

        if (!empty($formattedStartDate)) {
            $startDateArray = explode('/', $request->get('start_date'));
            // Check for correct formatting
            if (is_array($startDateArray) && (count($startDateArray) !== 3)) {
                return $this->redirectWithMessage('errorMessage','Start Date Format Is Invalid.', $request);
            }
            $startDate = Carbon::create($startDateArray[2], $startDateArray[0], $startDateArray[1]);
        }

        if (!empty($formattedEndDate)) {
            $endDateArray = explode('/', $request->get('end_date'));
            // Check for correct formatting
            if (is_array($endDateArray) && (count($endDateArray) !== 3)) {
                return $this->redirectWithMessage('errorMessage','End Date Format Is Invalid.', $request);
            }
            $endDate = Carbon::create($endDateArray[2], $endDateArray[0], $endDateArray[1]);
        }

        if(!empty($startDate) && !empty($endDate)) {
            if ($startDate->gt($endDate)) {
                return $this->redirectWithMessage('errorMessage', 'Start Date Must Be Before End Date.', $request);
            }
        }

        $query = Participant::query()
            ->join('events', 'participants.event_id', '=', 'events.id')
            ->where('events.is_archived', '=', 'false')
            ->leftJoin('users as cu', 'participants.created_by_id', '=', 'cu.id')
            ->leftJoin('users as su', 'participants.selected_by_id', '=', 'su.id')
            ->select(\DB::raw(
                'events.title as event_title,' . // A
                'events.store_number as event_store_number,' . // B
                'events.workfront_id as event_workfront_id,' . // C
                'DATE_FORMAT(events.start_date, "%m/%d/%Y") as event_start_date,' . // D
                'DATE_FORMAT(events.end_date, "%m/%d/%Y") as event_end_date,' . // E
                'events.region as event_region,' . // F
                'events.state as event_state,' . // G
                'events.default_language as event_language,' . // H
                'events.description as event_description,' . // I
                'participants.first_name as participant_first_name,' . // J
                'participants.last_name as participant_last_name,' . // K
                'CASE WHEN participants.is_contact <> 0 THEN participants.email ELSE "NO CONTACT" END as participant_email,' . // L
                'CASE WHEN participants.is_contact <> 0 THEN participants.phone ELSE "NO CONTACT" END as participant_phone,' . // M
                'participants.zip_code as participant_zip_code,' . // N
                'participants.language as participant_language,' . // O
                'CASE WHEN participants.is_customer <> 0 THEN "yes" ELSE "no" END as participant_is_customer,' . // P
                'participants.current_carrier as participant_current_carrier,' . // Q
                'CASE WHEN participants.is_contact <> 0 THEN "yes" ELSE "no" END as participant_is_contact,' . // R
                'DATE_FORMAT(participants.created_at, "%m/%d/%Y") as participant_created_date,' . // S
                'cu.first_name as creating_user_first_name,' . // T
                'cu.last_name as creating_user_last_name,' . // U
                'cu.email as creating_user_email,' . // V
                'DATE_FORMAT(participants.selected_date, "%m/%d/%Y") as participant_selected_date,' . // W
                'su.first_name as selecting_user_first_name,' . // X
                'su.last_name as selecting_user_last_name,' . // Y
                'su.email as selecting_user_email,' . // Z
                'CASE WHEN events.has_surveys_enabled <> 0 THEN "yes" ELSE "no" END as has_surveys_enabled,' . // AA
                'CASE WHEN events.has_surveys_enabled <> 0 THEN "N/A" ELSE CONCAT("' . request()->getHost() . '/surveys/create?event_id=", events.id) END as survey_link' // AB
            ))
            ->orderBy('events.title')
            ->orderBy('participants.created_at')
        ;

        if($startDate) {
            $query->where('participants.created_at', '>=', $startDate);
        }

        if($endDate) {
            $query->where('participants.created_at', '<=', $endDate);
        }

        $historicalRecords = $query->get()->toArray();

        $rowTitles = [
            'Event Name', // A
            'Event Store Number', // B
            'Event Workfront ID', // C
            'Event Start Date', // D
            'Event End Date', // E
            'Event Region', // F
            'Event State', // G
            'Event Language', // H
            'Event Description', // I
            'Participant First Name', // J
            'Participant Last Name', // K
            'Participant Email', // L
            'Participant Phone', // M
            'Participant Zip Code', // N
            'Participant Language', // O
            'Participant Is Customer', // P
            'Participant Is Current Carrier', // Q
            'Participant Can Be Contacted', // R
            'Participant Created Date', // S
            'Created By First Name', // T
            'Created By Last Name', // U
            'Created By Email', // V
            'Winner Selected Date', // W
            'Selected By First', // X
            'Selected By Last', // Y
            'Selected By Email', // Z
            'Has On-Site Surveys Enabled', // AA
            'Survey Link', // AB
        ];

        $spreadsheet = new Spreadsheet();
        $spreadsheet->getProperties()
            ->setCreator($requestUser->first_name . ' ' .$requestUser->last_name)
            ->setLastModifiedBy($requestUser->first_name . ' ' .$requestUser->last_name)
            // ->setTitle('Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xls')
            // ->setSubject('Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xls')
            ->setTitle('Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xlsx')
            ->setSubject('Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xlsx')
            // ->setDescription(
            //     'Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xls'
            // );
            ->setDescription(
                'Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xlsx'
            );

        $sheet = $spreadsheet->getActiveSheet();

        $sheet->setCellValue('A1', 'Historical Report From ' . $formattedStartDate . ' to ' . $formattedEndDate .'. ' . count($historicalRecords) . 'Records');

        $sheet->fromArray($rowTitles, null, 'A2');

        for ($i = 0; $i < (count($historicalRecords)); $i++){
            $sheet->fromArray($historicalRecords[$i], null, 'A' . (3 + $i));
        }

        $spreadsheet->getActiveSheet()->getColumnDimension('A')->setWidth(30); // Event Name
        $spreadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(25); // Event Store Number
        $spreadsheet->getActiveSheet()->getColumnDimension('C')->setWidth(25); // Workfront ID
        $spreadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(15); // Event Start Date
        $spreadsheet->getActiveSheet()->getColumnDimension('E')->setWidth(15); // Event End Date
        $spreadsheet->getActiveSheet()->getColumnDimension('F')->setWidth(15); // Event Region
        $spreadsheet->getActiveSheet()->getColumnDimension('G')->setWidth(15); // Event State
        $spreadsheet->getActiveSheet()->getColumnDimension('H')->setWidth(15); // Event Language
        $spreadsheet->getActiveSheet()->getColumnDimension('I')->setWidth(35); // Event Description
        $spreadsheet->getActiveSheet()->getColumnDimension('J')->setWidth(18); // Participant First Name
        $spreadsheet->getActiveSheet()->getColumnDimension('K')->setWidth(18); // Participant Last Name
        $spreadsheet->getActiveSheet()->getColumnDimension('L')->setWidth(40); // Participant Email
        $spreadsheet->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Participant Phone
        $spreadsheet->getActiveSheet()->getColumnDimension('N')->setWidth(25); // Participant Zip Code
        $spreadsheet->getActiveSheet()->getColumnDimension('O')->setWidth(30); // Participant Language
        $spreadsheet->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Participant Is Customer
        $spreadsheet->getActiveSheet()->getColumnDimension('Q')->setWidth(15); // Participant Current Carrier
        $spreadsheet->getActiveSheet()->getColumnDimension('R')->setWidth(15); // Participant Can Be Contacted
        $spreadsheet->getActiveSheet()->getColumnDimension('S')->setWidth(20); // Participant Created Date
        $spreadsheet->getActiveSheet()->getColumnDimension('T')->setWidth(18); // Created By First Name
        $spreadsheet->getActiveSheet()->getColumnDimension('U')->setWidth(18); // Created By Last Name
        $spreadsheet->getActiveSheet()->getColumnDimension('V')->setWidth(40); // Created By Email
        $spreadsheet->getActiveSheet()->getColumnDimension('W')->setWidth(20); // Selected Date
        $spreadsheet->getActiveSheet()->getColumnDimension('X')->setWidth(15); // Selected By First
        $spreadsheet->getActiveSheet()->getColumnDimension('Y')->setWidth(18); // Selected By Last
        $spreadsheet->getActiveSheet()->getColumnDimension('Z')->setWidth(40); // Selected By Email
        $spreadsheet->getActiveSheet()->getColumnDimension('AA')->setWidth(40); // Has On-Site Survyes Enabled
        $spreadsheet->getActiveSheet()->getColumnDimension('AB')->setWidth(50); // Survey Link

        // $writer = new Xls($spreadsheet);
        $writer = new Xlsx($spreadsheet);

        $timestamp = Carbon::now()->format('m-d-Y_') . time();

        $filename = 'HistoricalReportGeneratedOn' . $timestamp;

        //The name of the directory that we need to create.
        $directoryName = public_path() . '/filestorage/reports/historical/';

        // $savePath = $directoryName . '/' . $filename .'.xls';
        $savePath = $directoryName . '/' . $filename .'.xlsx';
        $zipSavePath = $directoryName . '/' . $filename . '.zip';

        $writer->save($savePath);

        unset($sheet);

        // Zip .xls file inside same directory
        echo system('zip -P ' . env('ZIP_FILE_PASSWORD') . '  -j ' . $zipSavePath . ' ' . $savePath);

        try {
            $mandrill = new \Mandrill(env('MANDRILL_API_KEY'));
            $message = array(
                'html' => view('emails.retrieveHistoricalData')->render(),
                'subject' => 'Export of Historical Event Data',
                'from_email' => env('EMAIL_FROM_ADDRESS'),
                'from_name' => env('EMAIL_FROM_NAME'),
                'to' => array(
                    array(
                        'email' => $requestUser->email,
                        'name' => 'T-Mobile User',
                        'type' => 'to'
                    )
                ),
                'headers' => array('Reply-To' => env('EMAIL_FROM_ADDRESS')),
                'attachments' => array(
                    array(
                        'type' => 'application/zip',
                        'name' => $filename . '.zip',
                        'content' => base64_encode(file_get_contents($zipSavePath))
                    )
                ),
            );
            $result = $mandrill->messages->send($message);

            if (!empty($result[0]) && !empty($result[0]['status'])) {
                if($result[0]['status'] == 'rejected')
                {
                    return $this->redirectWithMessage(
                        'errorMessage',
                        'There was a problem sending the report, please contact support at: ' . env('USER_SUPPORT_EMAIL_ADDRESS') . ". Error was: Historical Mandrill Rejection",
                        null,
                        route('admin.home')
                    );
                }
            }

        } catch(\Mandrill_Error $e) {
            // Mandrill errors are thrown as exceptions
//            echo 'A mandrill error occurred: ' . get_class($e) . ' - ' . $e->getMessage();
            // A mandrill error occurred: Mandrill_Unknown_Subaccount - No subaccount exists with the id 'customer-123'
//            throw $e;
            return $this->redirectWithMessage(
                'errorMessage',
                'There was a problem sending the report, please contact support at: ' . env('USER_SUPPORT_EMAIL_ADDRESS') . ". Error was: Mandrill Error: " . $e->getMessage(),
                null,
                route('admin.home')
            );

        }

        // Remove temporary files
        unlink($savePath);
        unlink($zipSavePath);


        return $this->redirectWithMessage(
            'successMessage',
            "Report has been generated and will be sent to " . Auth::user()->email,
            null,
            route('admin.home')
        );
    }

    public function historicalSurvey(Request $request)
    {

        return view('reports.historicalsurvey');
    }

    public function historicalSurveyGenerate(Request $request)
    {
        /** @var User $requestUser */
        $requestUser = \Auth::user();
        $formattedStartDate = $request->get('start_date');
        $formattedEndDate = $request->get('end_date');
        $startDate = null;
        $endDate = null;

        if(empty($requestUser)) {
            return $this->redirectWithMessage('errorMessage', 'Please Login.', null, 'login');
        }

        if (!empty($formattedStartDate)) {
            $startDateArray = explode('/', $request->get('start_date'));
            // Check for correct formatting
            if (is_array($startDateArray) && (count($startDateArray) !== 3)) {
                return $this->redirectWithMessage('errorMessage','Start Date Format Is Invalid.', $request);
            }
            $startDate = Carbon::create($startDateArray[2], $startDateArray[0], $startDateArray[1]);
        }

        if (!empty($formattedEndDate)) {
            $endDateArray = explode('/', $request->get('end_date'));
            // Check for correct formatting
            if (is_array($endDateArray) && (count($endDateArray) !== 3)) {
                return $this->redirectWithMessage('errorMessage','End Date Format Is Invalid.', $request);
            }
            $endDate = Carbon::create($endDateArray[2], $endDateArray[0], $endDateArray[1]);
        }

        if(!empty($startDate) && !empty($endDate)) {
            if ($startDate->gt($endDate)) {
                return $this->redirectWithMessage('errorMessage', 'Start Date Must Be Before End Date.', $request);
            }
        }

        $query = Survey::query()
            ->join('events', 'surveys.event_id', '=', 'events.id')
            ->where('events.is_archived', '=', 'false')
            ->select(\DB::raw(
                'events.title as event_title,' . // A
                'events.store_number as event_store_number,' . // B
                'events.workfront_id as event_workfront_id,' . // C
                'DATE_FORMAT(events.start_date, "%m/%d/%Y") as event_start_date,' . // D
                'DATE_FORMAT(events.end_date, "%m/%d/%Y") as event_end_date,' . // E
                'events.region as event_region,' . // F
                'events.state as event_state,' . // G
                'events.description as event_description,' . // H
                'DATE_FORMAT(surveys.created_at, "%m/%d/%Y") as survey_date, ' . // I
                'surveys.age as age, ' . // J
                'surveys.length_with_provider as length_with_provider, ' . // K
                'surveys.leave_likelihood as leave_likelihood, ' . // L
                'surveys.most_important as most_important, ' . // M
                'surveys.brand_rating as brand_rating, ' . // N
                'surveys.brand_rating_why as brand_rating_why, ' . // O
                'surveys.connect_wherever as connect_wherever, ' . // P
                'surveys.connect_wherever_why as connect_wherever_why, ' . // Q
                'surveys.switch_rating as switch_rating, ' . // R
                'surveys.comments as comments, ' . // S
                'surveys.created_at as survey_date, ' . // T
                'CASE WHEN surveys.has_mobile_phone <> 0 THEN "yes" ELSE "no" END as has_mobile_phone, ' . // U
                'CASE WHEN surveys.helps_decide_provider <> 0 THEN "yes" ELSE "no" END as helps_decide_provider, ' . // V
                'surveys.event_experience as event_experience, ' . // W
                'surveys.learned_something as learned_something, ' . // X
                'surveys.event_id as id' // Y
            ))
            ->orderBy('surveys.created_at')
        ;

        if($startDate) {
            $query->where('surveys.created_at', '>=', $startDate);
        }

        if($endDate) {
            $query->where('surveys.created_at', '<=', $endDate);
        }

        $historicalRecords = $query->get()->toArray();

        for($i = 0; $i < count($historicalRecords); $i++){
            $historicalRecords[$i]["id"] = route('surveys.create', ['event_id' => $historicalRecords[$i]["id"]]);
        }

        $rowTitles = [
            'Event Name', // A
            'Event Store Number', // B
            'Event Workfront ID', // C
            'Event Start Date', // D
            'Event End Date', // E
            'Event Region', // F
            'Event State', // G
            'Event Description', // H
            'Survey Date', // I
            'Age', // J
            'Length With Provider', // K
            'Likelihood of Leaving Provider', // L
            'Most Important Factor in Provider', // M
            'Brand For You', // N
            'Brand For You: Why', // O
            'Connect Wherever', // P
            'Connect Wherever: Why', // Q
            'Comments', // R
            'Survey Date (Raw)', // S
            'Has Mobile Phone', // T
            'Helps Decide Provider', // U
            'Event Experience', // V
            'Learned Something', // W
            'Event Link' // X
        ];

        $spreadsheet = new Spreadsheet();
        $spreadsheet->getProperties()
            ->setCreator($requestUser->first_name . ' ' .$requestUser->last_name)
            ->setLastModifiedBy($requestUser->first_name . ' ' .$requestUser->last_name)
            // ->setTitle('Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xls')
            // ->setSubject('Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xls')
            // ->setDescription(
            //     'Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xls'
            // );
            ->setTitle('Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xlsx')
            ->setSubject('Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xlsx')
            ->setDescription(
                'Historical Report Generated On ' . Carbon::now()->format('m-d-Y_') . time() .'.xlsx'
            );

        $sheet = $spreadsheet->getActiveSheet();

        $sheet->setCellValue('A1', 'Historical Report From ' . $formattedStartDate . ' to ' . $formattedEndDate .'. ' . count($historicalRecords) . 'Records');

        $sheet->fromArray($rowTitles, null, 'A2');

        for ($i = 0; $i < (count($historicalRecords)); $i++){
            $sheet->fromArray($historicalRecords[$i], null, 'A' . (3 + $i));
        }

        $spreadsheet->getActiveSheet()->getColumnDimension('A')->setWidth(25); // Event Name
        $spreadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(15); // Event Store Number
        $spreadsheet->getActiveSheet()->getColumnDimension('C')->setWidth(25); // Event Workfront ID
        $spreadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(15); // Event Start Date
        $spreadsheet->getActiveSheet()->getColumnDimension('E')->setWidth(15); // Event End Date
        $spreadsheet->getActiveSheet()->getColumnDimension('F')->setWidth(15); // Event Region
        $spreadsheet->getActiveSheet()->getColumnDimension('G')->setWidth(15); // Event State
        $spreadsheet->getActiveSheet()->getColumnDimension('H')->setWidth(25); // Event Description
        $spreadsheet->getActiveSheet()->getColumnDimension('I')->setWidth(18); // Participant First Name
        $spreadsheet->getActiveSheet()->getColumnDimension('J')->setWidth(18); // Participant Last Name
        $spreadsheet->getActiveSheet()->getColumnDimension('K')->setWidth(25); // Participant Email
        $spreadsheet->getActiveSheet()->getColumnDimension('L')->setWidth(15); // Participant Phone
        $spreadsheet->getActiveSheet()->getColumnDimension('M')->setWidth(15); // Participant Zip Code
        $spreadsheet->getActiveSheet()->getColumnDimension('N')->setWidth(15); // Participant Language
        $spreadsheet->getActiveSheet()->getColumnDimension('O')->setWidth(15); // Participant Is Customer
        $spreadsheet->getActiveSheet()->getColumnDimension('P')->setWidth(15); // Participant Can Be Contacted
        $spreadsheet->getActiveSheet()->getColumnDimension('Q')->setWidth(20); // Participant Created Date
        $spreadsheet->getActiveSheet()->getColumnDimension('R')->setWidth(18); // Created By First Name
        $spreadsheet->getActiveSheet()->getColumnDimension('S')->setWidth(18); // Created By Last Name
        $spreadsheet->getActiveSheet()->getColumnDimension('T')->setWidth(20); // Created By Email
        $spreadsheet->getActiveSheet()->getColumnDimension('U')->setWidth(20); // Selected Date
        $spreadsheet->getActiveSheet()->getColumnDimension('V')->setWidth(15); // Selected By First
        $spreadsheet->getActiveSheet()->getColumnDimension('W')->setWidth(18); // Selected By Last
        $spreadsheet->getActiveSheet()->getColumnDimension('X')->setWidth(18); // Selected By Email

        // $writer = new Xls($spreadsheet);
        $writer = new Xlsx($spreadsheet);

        $timestamp = Carbon::now()->format('m-d-Y_') . time();

        $filename = 'HistoricalSurveyReportGeneratedOn' . $timestamp;

        //The name of the directory that we need to create.
        $directoryName = public_path() . '/filestorage/reports/historicalsurveys/';

        // $savePath = $directoryName . '/' . $filename .'.xls';
        $savePath = $directoryName . '/' . $filename .'.xlsx';
        $zipSavePath = $directoryName . '/' . $filename . '.zip';

        $writer->save($savePath);

        unset($sheet);

        // Zip .xls file inside same directory
        echo system('zip -P ' . env('ZIP_FILE_PASSWORD') . '  -j ' . $zipSavePath . ' ' . $savePath);

        try {
            $mandrill = new \Mandrill(env('MANDRILL_API_KEY'));
            $message = array(
                'html' => view('emails.retrieveHistoricalData')->render(),
                'subject' => 'Export of Historical Survey Data',
                'from_email' => env('EMAIL_FROM_ADDRESS'),
                'from_name' => env('EMAIL_FROM_NAME'),
                'to' => array(
                    array(
                        'email' => $requestUser->email,
                        'name' => 'T-Mobile User',
                        'type' => 'to'
                    )
                ),
                'headers' => array('Reply-To' => env('EMAIL_FROM_ADDRESS')),
                'attachments' => array(
                    array(
                        'type' => 'application/zip',
                        'name' => $filename . '.zip',
                        'content' => base64_encode(file_get_contents($zipSavePath))
                    )
                ),
            );
            $result = $mandrill->messages->send($message);

            if (!empty($result[0]) && !empty($result[0]['status'])) {
                if($result[0]['status'] == 'rejected')
                {
                    return $this->redirectWithMessage(
                        'errorMessage',
                        'There was a problem sending the report, please contact support at: ' . env('USER_SUPPORT_EMAIL_ADDRESS') . ". Error was: Historical Mandrill Rejection",
                        null,
                        route('admin.home')
                    );
                }
            }

        } catch(\Mandrill_Error $e) {
            // Mandrill errors are thrown as exceptions
            // echo 'A mandrill error occurred: ' . get_class($e) . ' - ' . $e->getMessage();
            // A mandrill error occurred: Mandrill_Unknown_Subaccount - No subaccount exists with the id 'customer-123'
            // throw $e;
            return $this->redirectWithMessage(
                'errorMessage',
                'There was a problem sending the report, please contact support at: ' . env('USER_SUPPORT_EMAIL_ADDRESS') . ". Error was: Mandrill Error: " . $e->getMessage(),
                null,
                route('admin.home')
            );

        }

        // Remove temporary files
        unlink($savePath);
        unlink($zipSavePath);

        return $this->redirectWithMessage(
            'successMessage',
            "Report has been generated and will be sent to " . Auth::user()->email,
            null,
            route('admin.home')
        );
    }

    private function redirectWithMessage($messageType, $messageText, $request = null, $redirectPath = '') {

        Session::flash($messageType, $messageText);

        if(!empty($request)) {
            $request->flash();
        }

        if(!empty($redirectPath)) {
            return redirect($redirectPath);
        }

        return redirect()->back();
    }
}
